# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.6)
{
  description = "Nome: nubiv Nix home";

  inputs = {
    dev-templates = { url = "https://flakehub.com/f/the-nix-way/dev-templates/0.1"; inputs.nixpkgs.follows = "nixpkgs"; };
    easy-template = { url = "https://flakehub.com/f/DeterminateSystems/easy-template/0.1"; inputs.nixpkgs.follows = "nixpkgs"; };
    fh = { url = "https://flakehub.com/f/DeterminateSystems/fh/0.1"; };
    flake-checker = { url = "https://flakehub.com/f/DeterminateSystems/flake-checker/*"; inputs.nixpkgs.follows = "nixpkgs"; };
    flake-iter = { url = "https://flakehub.com/f/DeterminateSystems/flake-iter/*"; inputs.nixpkgs.follows = "nixpkgs"; };
    home-manager = { url = "https://flakehub.com/f/nix-community/home-manager/0"; inputs.nixpkgs.follows = "nixpkgs"; };
    nh = { url = "github:nix-community/nh"; inputs.nixpkgs.follows = "nixpkgs"; };
    nix-darwin = { url = "https://flakehub.com/f/nix-darwin/nix-darwin/0"; inputs.nixpkgs.follows = "nixpkgs"; };
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/0";
    nixpkgs-unstable.url = "https://flakehub.com/f/NixOS/nixpkgs/0.1";
  };

  outputs = inputs:
    let
      supportedSystems = [ "aarch64-darwin" ];
      forEachSupportedSystem = f: inputs.nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import inputs.nixpkgs {
          inherit system;
          overlays = [ inputs.self.overlays.default ];
        };
        inherit system;
      });

      stateVersion = "25.05";
      system = "aarch64-darwin";
      username = "nubiv";
    in
    {
      devShells = forEachSupportedSystem ({ pkgs, system }: {
        default =
          let
            reload = pkgs.writeScriptBin "reload" ''
              set -e
              echo "> Running darwin-rebuild switch..."
              sudo ${inputs.nix-darwin.packages.${system}.darwin-rebuild}/bin/darwin-rebuild switch --flake .#${username}-${system}
              echo "> darwin-rebuild switch was successful âœ…"
              echo "> Refreshing zshrc..."
              ${pkgs.zsh}/bin/zsh -c "source ${pkgs.lib.homeDirectory}/.zshrc"
              echo "> zshrc was refreshed successfully âœ…"
              echo "> macOS config was successfully applied ðŸš€"
            '';
          in
          pkgs.mkShell {
            name = "nome";
            packages = with pkgs; [
              nixpkgs-fmt
              reload
            ];
          };
      });

      overlays.default = final: prev: {
        # Constant values to pass around
        constants = {
          inherit username system;
        };

        # Extra lib functions
        lib = prev.lib // {
          homeDirectory =
            if (prev.stdenv.isDarwin)
            then "/Users/${username}"
            else "/home/${username}";
        };

        # Centralize theme stuff here
        fonts = {
          packages = with final; [ ];

          vscode = {
            # main = "Jetbrains Mono";
            # terminal = "Jetbrains Mono";
          };
        };

        themes = {
          bat = "Catppuccin Mocha";
          helix = "catppuccin_mocha";
          spotify-player = "catppuccin-mocha";
          vscode = {
            icon = "catppuccin-mocha";
            light = "Catppuccin Latte";
            dark = "Catppuccin Mocha";
          };
          zellij = "catppuccin-mocha";
        };

        # Packages
        dvt = inputs.dev-templates.packages.${system}.dvt;
        easy-template = inputs.easy-template.packages.${system}.default;
        #ephemera = inputs.ephemera.packages.${system}.default;
        fh = inputs.fh.packages.${system}.default;
        flake-checker = inputs.flake-checker.packages.${system}.default;
        flake-iter = inputs.flake-iter.packages.${system}.default;
        jujutsu = inputs.nixpkgs-unstable.legacyPackages.${system}.jujutsu;
        linux-builder = final.writeScriptBin "linux-builder" ''
          sudo ${inputs.nixpkgs-unstable.legacyPackages.${system}.darwin.linux-builder}/bin/create-builder
        '';
        nh = inputs.nh.packages.${system}.default;
        nushell = inputs.nixpkgs-unstable.legacyPackages.${system}.nushell;
        zed-editor = inputs.nixpkgs-unstable.legacyPackages.${system}.zed-editor;

        unstable = with inputs.nixpkgs-unstable.legacyPackages.${system}; [ hugo jjui ];
      };

      darwinConfigurations."${username}-${system}" = inputs.nix-darwin.lib.darwinSystem {
        inherit system;
        modules = [
          inputs.self.darwinModules.base
          inputs.self.darwinModules.determinate-nix
          inputs.home-manager.darwinModules.home-manager
          inputs.self.darwinModules.home-manager
	  inputs.self.darwinModules.system-config
        ];
      };

      darwinModules = {
        base = { pkgs, ... }: import ./nix-darwin/base {
          inherit pkgs;
          overlays = [
            inputs.self.overlays.default
          ];
        };

        home-manager = { pkgs, ... }: import ./home-manager {
          inherit pkgs stateVersion username;
        };

        system-config = { pkgs, ... }: import ./nix-darwin/base/system.nix {
          inherit pkgs stateVersion username;
        };

        determinate-nix = { config, lib, ... }:
          let
            # https://github.com/nix-darwin/nix-darwin/blob/0d71cbf88d63e938b37b85b3bf8b238bcf7b39b9/modules/nix/default.nix#L34
            mkValueString = v:
              if v == null then ""
              else if builtins.isInt v then builtins.toString v
              else if builtins.isBool v then lib.boolToString v
              else if builtins.isFloat v then lib.strings.floatToString v
              else if builtins.isList v then builtins.toString v
              else if lib.isDerivation v then builtins.toString v
              else if builtins.isPath v then builtins.toString v
              else if builtins.isString v then v
              else if lib.strings.isCoercibleToString v then builtins.toString v
              else abort "The nix conf value ${lib.generators.toPretty {} v} can't be encoded";
            mkKeyValue = k: v: "${lib.escape [ "=" ] k} = ${mkValueString v}";

            inherit (lib) types;

            semanticConfType = with types;
              let
                confAtom = nullOr
                  (oneOf [
                    bool
                    int
                    float
                    str
                    path
                    package
                  ]) // {
                  description = "Nix config atom (null, bool, int, float, str, path or package)";
                };
              in
              attrsOf (either confAtom (listOf confAtom));

            # Settings that Determinate Nix handles for you
            disallowedOptions = [
              "always-allow-substitutes"
              "bash-prompt-prefix"
              "extra-experimental-features"
              "extra-nix-path"
              "netrc-file"
              "ssl-cert-file"
              "upgrade-nix-store-path-url"
            ];
          in
          {
            options.determinate-nix.customSettings = lib.mkOption {
              type = types.submodule {
                freeformType = semanticConfType;

                options = {
                  lazy-trees = lib.mkOption {
                    type = types.bool;
                    default = false;
                    example = true;
                    description = ''
                      Whether to enable lazy trees.
                    '';
                  };
                };
              };
            };

            config = lib.mkIf (config.determinate-nix.customSettings != { }) {
              assertions = [
                {
                  assertion =
                    lib.all (key: !lib.hasAttr key config.determinate-nix.customSettings) disallowedOptions;
                  message = ''
                    These settings are not allowed in `determinate-nix.customSettings`:
                      ${lib.concatStringsSep ", " disallowedOptions}
                  '';
                }
              ];

              environment.etc."nix/nix.custom.conf".text =
                lib.concatStringsSep "\n" (
                  [
                    "# This file is generated by the determinate module for nix-darwin."
                    "# Update this file by changing your nix-darwin configuration, not by modifying it directly."
                    ""
                  ]
                  ++ lib.mapAttrsToList mkKeyValue config.determinate-nix.customSettings
                );
            };
          };
      };

      templates = import ./templates;
    };
}
